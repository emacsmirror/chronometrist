#+TITLE: chronometrist-third
#+SUBTITLE: Third Time System extension for Chronometrist
#+PROPERTY: header-args :tangle yes :load yes :comments link

* Program source
** divisor
#+BEGIN_SRC emacs-lisp
(defcustom chronometrist-third-divisor 3
  "Number to determine accumulation of break time relative to work time.")
#+END_SRC

** break-time
#+BEGIN_SRC emacs-lisp
(defvar chronometrist-third-break-time 0
  "Accumulated break time in seconds.")
#+END_SRC

** clock-in
#+BEGIN_SRC emacs-lisp
(defun chronometrist-third-clock-in ()
  (unless (zerop chronometrist-third-break-time)
    (-let* (((&plist :stop stop) (cl-second (chronometrist-to-list (chronometrist-active-backend))))
            (used-break-duration (ts-diff (ts-now) (chronometrist-iso-to-ts stop)))
            (new-break-time      (- chronometrist-third-break-time used-break-duration)))
      (setq chronometrist-third-break-time
            (if (> new-break-time 0)
                new-break-time
              0)))))
#+END_SRC

** clock-out
#+BEGIN_SRC emacs-lisp
(defun chronometrist-third-clock-out ()
  (let ((latest-work-duration (chronometrist-interval (chronometrist-latest-record (chronometrist-active-backend)))))
    (cl-incf chronometrist-third-break-time (/ latest-work-duration chronometrist-third-divisor))
    ;; start notification timer(s)
    ;; ...
    ))
#+END_SRC

* Local variables                                                  :NOEXPORT:
# Local Variables:
# my-org-src-default-lang: "emacs-lisp"
# End:
